version: "3"

services:
  nginx:
    build:
      context: ./docker/nginx
      args:
        - config=${NGINX_CONF:-site.conf}
    restart: unless-stopped
    environment:
      - SERVER_NAME=${SERVER_NAME:-localhost}
      - SSL_PORT=${HTTPS_PORT:-443}
    expose:
      - 8000
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/${NGINX_CONF:-site.conf}:/etc/nginx/templates/default.conf
      - ./docker/nginx/snippets:/etc/nginx/snippets
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./docker/certbot:/var/www/certbot
      - .:/usr/src
    networks:
      - server-net
    depends_on:
      - web
      - api
      - admin

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - dir=web
    expose:
      - 9000
    volumes:
      # Can be disabled for production (code is baked in)
      - .:/usr/src
    networks:
      - server-net
    depends_on:
      - api

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - dir=api
    volumes:
      - .:/usr/src
#       - sqlite-data:/usr/data
      - ./data:/usr/data
    expose:
      - 9000
    networks:
      - server-net

  admin:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - dir=admin
    volumes:
      - .:/usr/src
#       - sqlite-data:/usr/data
      - ./data:/usr/data
    expose:
      - 9000
    networks:
      - server-net
#  certbot:
#    image: certbot/certbot
#    volumes:
#      - ./docker/nginx/ssl/certbot:/etc/letsencrypt
#      - ./docker/certbot:/var/www/certbot

# If desired, the sqlite file can be stored inside docker volumes (faster).
#  No direct access to the file is then available though, and initialization must be made programmatically.
# volumes:
#   sqlite-data:

networks:
  server-net:
    driver: bridge
